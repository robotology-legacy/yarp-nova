
=== login ===========================================================

client sends
  connect <username> <passwd>

server responds with
  @status login 1
on success, or
  @error <error description>
on failure

CURRENT server implementation ignores passwd -- any username will do.


=== gameplay ========================================================

client can send a "go" instruction, a "fire" instruction, a
"look" instruction, or a "say" instruction


GO instructions - can send any one of:
  go left
  go right
  go up
  go down

server responds with
  @move requested
and will try to implement the move on the next game simulation step


FIRE instructions - can send any one of:
  fire left
  fire right
  fire up
  fire down
server responds with
  @fire requested


LOOK instruction:
  look
server responds with
  @look begins
  :<map line 0>:
  :<map line 1>:
  ...
  :<map line n>:
  See <x0> <y0> <username0>
  See <x1> <y1> <username1>
  See <x2> <y2> <username2>
  ...
  @look ends

The map lines give a summary of what is around the player,
using a set of characters with the following meanings:
  :  -- edge of map
  #  -- immovable obstacle
  Q  -- the player, when alive
  0  -- other players when alive
  %  -- the player, when dead
  *  -- other players, when dead
  =  -- traces the path where someone fired; visible for a short time
The see lines give the name of the players visible, and
how many lives they have left.  The first player listed is always
the player who issued the look command.

SAY instruction:
  say <text>
The <text> is broadcast to all players connected to the game.
The message they receive from the server will be of the form
  @broadcast <username> <text>
Your client must be prepared to receive this message at any time.

